apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: brain-tensorflow-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 0.5.1, pipelines.kubeflow.org/pipeline_compilation_time: '2020-10-03T13:25:28.084727',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "End to End pipeline for
      Tensorflow Brain MRI", "inputs": [{"default": "gcr.io/<PROJECT_ID>/brain_tumor_scan/step1_download_data:v1",
      "name": "dataextraction_step_image", "optional": true}, {"default": "gcr.io/<PROJECT_ID>/brain_tumor_scan/step2_dataprocessing:v1",
      "name": "dataprocessing_step_image", "optional": true}, {"default": "gcr.io/<PROJECT_ID>/brain_tumor_scan/step3_training_model:v1",
      "name": "trainmodel_step_image", "optional": true}, {"default": "gcr.io/<PROJECT_ID>/brain_tumor_scan/step4_evaluation_model:V1",
      "name": "evaluator_step_image", "optional": true}, {"default": "/mnt/", "name":
      "root", "optional": true}, {"default": "/mnt/BrainScan_Data/", "name": "data_file",
      "optional": true}, {"default": "navoneel/brain-mri-images-for-brain-tumor-detection",
      "name": "kaggle_api_data", "optional": true}, {"default": "/mnt/training.data",
      "name": "train_file", "optional": true}, {"default": "/mnt/test.data", "name":
      "test_file", "optional": true}, {"default": "/mnt/validation.data", "name":
      "validation_file", "optional": true}, {"default": "/mnt/labels.data", "name":
      "label", "optional": true}, {"default": "sigmoid", "name": "activation", "optional":
      true}, {"default": "224", "name": "image_size", "optional": true}, {"default":
      "/mnt/trainingtarget.data", "name": "train_target", "optional": true}, {"default":
      "/mnt/testtarget.data", "name": "test_target", "optional": true}, {"default":
      "/mnt/validationtarget.data", "name": "validation_target", "optional": true},
      {"default": "10", "name": "epochs", "optional": true}, {"default": "0.001",
      "name": "learning_rate", "optional": true}, {"default": "1000", "name": "shuffle_size",
      "optional": true}, {"default": "/mnt/logs/", "name": "tensorboard_logs", "optional":
      true}, {"default": "gs://<BUCKET_NAME>/brain/logs", "name": "tensorboard_gcs_logs",
      "optional": true}, {"default": "/mnt/saved_model", "name": "model_output_base_path",
      "optional": true}, {"default": "gs://<BUCKET_NAME>/brain/model", "name":
      "gcs_path", "optional": true}, {"default": "gs://<BUCKET_NAME>/brain", "name":
      "gcs_path_confusion", "optional": true}, {"default": "gcs", "name": "mode",
      "optional": true}, {"default": "0.5", "name": "probability", "optional": true},
      {"default": "kfserving-braintumor", "name": "serving_name", "optional": true},
      {"default": "kubeflow", "name": "serving_namespace", "optional": true}, {"default":
      "gcr.io/<PROJECT_ID>/brain_tumor_scan1/kf_serving_braintest:v1", "name":
      "image", "optional": true}], "name": "Brain tensorflow pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 0.5.1}
spec:
  entrypoint: brain-tensorflow-pipeline
  templates:
  - name: brain-tensorflow-pipeline
    inputs:
      parameters:
      - {name: activation}
      - {name: data_file}
      - {name: dataextraction_step_image}
      - {name: dataprocessing_step_image}
      - {name: epochs}
      - {name: evaluator_step_image}
      - {name: gcs_path}
      - {name: gcs_path_confusion}
      - {name: image}
      - {name: image_size}
      - {name: kaggle_api_data}
      - {name: label}
      - {name: learning_rate}
      - {name: mode}
      - {name: model_output_base_path}
      - {name: probability}
      - {name: root}
      - {name: serving_name}
      - {name: serving_namespace}
      - {name: tensorboard_gcs_logs}
      - {name: tensorboard_logs}
      - {name: test_file}
      - {name: test_target}
      - {name: train_file}
      - {name: train_target}
      - {name: trainmodel_step_image}
      - {name: validation_file}
      - {name: validation_target}
    dag:
      tasks:
      - name: data-extraction
        template: data-extraction
        dependencies: [my-pvc]
        arguments:
          parameters:
          - {name: data_file, value: '{{inputs.parameters.data_file}}'}
          - {name: dataextraction_step_image, value: '{{inputs.parameters.dataextraction_step_image}}'}
          - {name: kaggle_api_data, value: '{{inputs.parameters.kaggle_api_data}}'}
          - {name: my-pvc-name, value: '{{tasks.my-pvc.outputs.parameters.my-pvc-name}}'}
          - {name: root, value: '{{inputs.parameters.root}}'}
      - name: data-processing
        template: data-processing
        dependencies: [data-extraction, my-pvc]
        arguments:
          parameters:
          - {name: dataprocessing_step_image, value: '{{inputs.parameters.dataprocessing_step_image}}'}
          - {name: image_size, value: '{{inputs.parameters.image_size}}'}
          - {name: label, value: '{{inputs.parameters.label}}'}
          - {name: my-pvc-name, value: '{{tasks.my-pvc.outputs.parameters.my-pvc-name}}'}
          - {name: root, value: '{{inputs.parameters.root}}'}
          - {name: test_file, value: '{{inputs.parameters.test_file}}'}
          - {name: test_target, value: '{{inputs.parameters.test_target}}'}
          - {name: train_file, value: '{{inputs.parameters.train_file}}'}
          - {name: train_target, value: '{{inputs.parameters.train_target}}'}
          - {name: validation_file, value: '{{inputs.parameters.validation_file}}'}
          - {name: validation_target, value: '{{inputs.parameters.validation_target}}'}
      - name: evaluation-model
        template: evaluation-model
        dependencies: [my-pvc, train-model]
        arguments:
          parameters:
          - {name: evaluator_step_image, value: '{{inputs.parameters.evaluator_step_image}}'}
          - {name: gcs_path, value: '{{inputs.parameters.gcs_path}}'}
          - {name: gcs_path_confusion, value: '{{inputs.parameters.gcs_path_confusion}}'}
          - {name: label, value: '{{inputs.parameters.label}}'}
          - {name: model_output_base_path, value: '{{inputs.parameters.model_output_base_path}}'}
          - {name: my-pvc-name, value: '{{tasks.my-pvc.outputs.parameters.my-pvc-name}}'}
          - {name: probability, value: '{{inputs.parameters.probability}}'}
          - {name: test_file, value: '{{inputs.parameters.test_file}}'}
          - {name: test_target, value: '{{inputs.parameters.test_target}}'}
      - {name: my-pvc, template: my-pvc}
      - name: serve
        template: serve
        dependencies: [evaluation-model]
        arguments:
          parameters:
          - {name: image, value: '{{inputs.parameters.image}}'}
          - {name: serving_name, value: '{{inputs.parameters.serving_name}}'}
          - {name: serving_namespace, value: '{{inputs.parameters.serving_namespace}}'}
      - name: train-model
        template: train-model
        dependencies: [data-processing, my-pvc]
        arguments:
          parameters:
          - {name: activation, value: '{{inputs.parameters.activation}}'}
          - {name: epochs, value: '{{inputs.parameters.epochs}}'}
          - {name: gcs_path, value: '{{inputs.parameters.gcs_path}}'}
          - {name: image_size, value: '{{inputs.parameters.image_size}}'}
          - {name: label, value: '{{inputs.parameters.label}}'}
          - {name: learning_rate, value: '{{inputs.parameters.learning_rate}}'}
          - {name: mode, value: '{{inputs.parameters.mode}}'}
          - {name: model_output_base_path, value: '{{inputs.parameters.model_output_base_path}}'}
          - {name: my-pvc-name, value: '{{tasks.my-pvc.outputs.parameters.my-pvc-name}}'}
          - {name: tensorboard_gcs_logs, value: '{{inputs.parameters.tensorboard_gcs_logs}}'}
          - {name: tensorboard_logs, value: '{{inputs.parameters.tensorboard_logs}}'}
          - {name: test_file, value: '{{inputs.parameters.test_file}}'}
          - {name: test_target, value: '{{inputs.parameters.test_target}}'}
          - {name: train_file, value: '{{inputs.parameters.train_file}}'}
          - {name: train_target, value: '{{inputs.parameters.train_target}}'}
          - {name: trainmodel_step_image, value: '{{inputs.parameters.trainmodel_step_image}}'}
          - {name: validation_file, value: '{{inputs.parameters.validation_file}}'}
          - {name: validation_target, value: '{{inputs.parameters.validation_target}}'}
  - name: data-extraction
    container:
      args: [/app/dataextract.py, --root, '{{inputs.parameters.root}}', --data-file,
        '{{inputs.parameters.data_file}}', --kaggle-api-data, '{{inputs.parameters.kaggle_api_data}}']
      command: [python]
      env:
      - {name: GOOGLE_APPLICATION_CREDENTIALS, value: /secret/gcp-credentials/user-gcp-sa.json}
      - {name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE, value: /secret/gcp-credentials/user-gcp-sa.json}
      image: '{{inputs.parameters.dataextraction_step_image}}'
      volumeMounts:
      - {mountPath: /mnt, name: my-pvc}
      - {mountPath: /secret/gcp-credentials, name: gcp-credentials-user-gcp-sa}
    inputs:
      parameters:
      - {name: data_file}
      - {name: dataextraction_step_image}
      - {name: kaggle_api_data}
      - {name: my-pvc-name}
      - {name: root}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
    volumes:
    - name: gcp-credentials-user-gcp-sa
      secret: {secretName: user-gcp-sa}
    - name: my-pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.my-pvc-name}}'}
  - name: data-processing
    container:
      args: [/app/preprocessing.py, --train-file, '{{inputs.parameters.train_file}}',
        --test-file, '{{inputs.parameters.test_file}}', --validation-file, '{{inputs.parameters.validation_file}}',
        --root, '{{inputs.parameters.root}}', --image-size, '{{inputs.parameters.image_size}}',
        --train-target, '{{inputs.parameters.train_target}}', --test-target, '{{inputs.parameters.test_target}}',
        --validation-target, '{{inputs.parameters.validation_target}}', --label, '{{inputs.parameters.label}}']
      command: [python]
      env:
      - {name: GOOGLE_APPLICATION_CREDENTIALS, value: /secret/gcp-credentials/user-gcp-sa.json}
      - {name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE, value: /secret/gcp-credentials/user-gcp-sa.json}
      image: '{{inputs.parameters.dataprocessing_step_image}}'
      volumeMounts:
      - {mountPath: /mnt, name: my-pvc}
      - {mountPath: /secret/gcp-credentials, name: gcp-credentials-user-gcp-sa}
    inputs:
      parameters:
      - {name: dataprocessing_step_image}
      - {name: image_size}
      - {name: label}
      - {name: my-pvc-name}
      - {name: root}
      - {name: test_file}
      - {name: test_target}
      - {name: train_file}
      - {name: train_target}
      - {name: validation_file}
      - {name: validation_target}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
    volumes:
    - name: gcp-credentials-user-gcp-sa
      secret: {secretName: user-gcp-sa}
    - name: my-pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.my-pvc-name}}'}
  - name: evaluation-model
    container:
      args: [/app/evaluator.py, --test-file, '{{inputs.parameters.test_file}}', --test-target,
        '{{inputs.parameters.test_target}}', --probability, '{{inputs.parameters.probability}}',
        --model-output-base-path, '{{inputs.parameters.model_output_base_path}}',
        --gcs-path, '{{inputs.parameters.gcs_path}}', --label, '{{inputs.parameters.label}}',
        --gcs-path-confusion, '{{inputs.parameters.gcs_path_confusion}}']
      command: [python]
      env:
      - {name: GOOGLE_APPLICATION_CREDENTIALS, value: /secret/gcp-credentials/user-gcp-sa.json}
      - {name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE, value: /secret/gcp-credentials/user-gcp-sa.json}
      image: '{{inputs.parameters.evaluator_step_image}}'
      volumeMounts:
      - {mountPath: /mnt, name: my-pvc}
      - {mountPath: /secret/gcp-credentials, name: gcp-credentials-user-gcp-sa}
    inputs:
      parameters:
      - {name: evaluator_step_image}
      - {name: gcs_path}
      - {name: gcs_path_confusion}
      - {name: label}
      - {name: model_output_base_path}
      - {name: my-pvc-name}
      - {name: probability}
      - {name: test_file}
      - {name: test_target}
    outputs:
      artifacts:
      - {name: mlpipeline-metrics, path: /mlpipeline-metrics.json}
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
    volumes:
    - name: gcp-credentials-user-gcp-sa
      secret: {secretName: user-gcp-sa}
    - name: my-pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.my-pvc-name}}'}
  - name: my-pvc
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-my-pvc'
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    outputs:
      parameters:
      - name: my-pvc-manifest
        valueFrom: {jsonPath: '{}'}
      - name: my-pvc-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: my-pvc-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
  - name: serve
    resource:
      action: apply
      successCondition: status.url
      manifest: |
        apiVersion: serving.kubeflow.org/v1alpha2
        kind: InferenceService
        metadata:
          labels:
            controller-tools.k8s.io: '1.0'
          name: '{{inputs.parameters.serving_name}}'
          namespace: '{{inputs.parameters.serving_namespace}}'
        spec:
          default:
            predictor:
              custom:
                container:
                  image: '{{inputs.parameters.image}}'
    inputs:
      parameters:
      - {name: image}
      - {name: serving_name}
      - {name: serving_namespace}
    outputs:
      parameters:
      - name: serve-manifest
        valueFrom: {jsonPath: '{}'}
      - name: serve-name
        valueFrom: {jsonPath: '{.metadata.name}'}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
  - name: train-model
    container:
      args: [/app/train.py, --train-file, '{{inputs.parameters.train_file}}', --test-file,
        '{{inputs.parameters.test_file}}', --label, '{{inputs.parameters.label}}',
        --activation, '{{inputs.parameters.activation}}', --validation-file, '{{inputs.parameters.validation_file}}',
        --train-target, '{{inputs.parameters.train_target}}', --test-target, '{{inputs.parameters.test_target}}',
        --validation-target, '{{inputs.parameters.validation_target}}', --epochs,
        '{{inputs.parameters.epochs}}', --image-size, '{{inputs.parameters.image_size}}',
        --learning-rate, '{{inputs.parameters.learning_rate}}', --tensorboard-logs,
        '{{inputs.parameters.tensorboard_logs}}', --tensorboard-gcs-logs, '{{inputs.parameters.tensorboard_gcs_logs}}',
        --model-output-base-path, '{{inputs.parameters.model_output_base_path}}',
        --gcs-path, '{{inputs.parameters.gcs_path}}', --mode, '{{inputs.parameters.mode}}']
      command: [python]
      env:
      - {name: GOOGLE_APPLICATION_CREDENTIALS, value: /secret/gcp-credentials/user-gcp-sa.json}
      - {name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE, value: /secret/gcp-credentials/user-gcp-sa.json}
      image: '{{inputs.parameters.trainmodel_step_image}}'
      volumeMounts:
      - {mountPath: /mnt, name: my-pvc}
      - {mountPath: /secret/gcp-credentials, name: gcp-credentials-user-gcp-sa}
    inputs:
      parameters:
      - {name: activation}
      - {name: epochs}
      - {name: gcs_path}
      - {name: image_size}
      - {name: label}
      - {name: learning_rate}
      - {name: mode}
      - {name: model_output_base_path}
      - {name: my-pvc-name}
      - {name: tensorboard_gcs_logs}
      - {name: tensorboard_logs}
      - {name: test_file}
      - {name: test_target}
      - {name: train_file}
      - {name: train_target}
      - {name: trainmodel_step_image}
      - {name: validation_file}
      - {name: validation_target}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
    volumes:
    - name: gcp-credentials-user-gcp-sa
      secret: {secretName: user-gcp-sa}
    - name: my-pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.my-pvc-name}}'}
  arguments:
    parameters:
    - {name: dataextraction_step_image, value: 'gcr.io/<PROJECT_ID>/brain_tumor_scan/step1_download_data:v1'}
    - {name: dataprocessing_step_image, value: 'gcr.io/<PROJECT_ID>brain_tumor_scan/step2_dataprocessing:v1'}
    - {name: trainmodel_step_image, value: 'gcr.io/<PROJECT_ID>/brain_tumor_scan/step3_training_model:v1'}
    - {name: evaluator_step_image, value: 'gcr.io/<PROJECT_ID>/brain_tumor_scan/step4_evaluation_model:v1'}
    - {name: root, value: /mnt/}
    - {name: data_file, value: /mnt/BrainScan_Data/}
    - {name: kaggle_api_data, value: navoneel/brain-mri-images-for-brain-tumor-detection}
    - {name: train_file, value: /mnt/training.data}
    - {name: test_file, value: /mnt/test.data}
    - {name: validation_file, value: /mnt/validation.data}
    - {name: label, value: /mnt/labels.data}
    - {name: activation, value: sigmoid}
    - {name: image_size, value: '224'}
    - {name: train_target, value: /mnt/trainingtarget.data}
    - {name: test_target, value: /mnt/testtarget.data}
    - {name: validation_target, value: /mnt/validationtarget.data}
    - {name: epochs, value: '10'}
    - {name: learning_rate, value: '0.001'}
    - {name: shuffle_size, value: '1000'}
    - {name: tensorboard_logs, value: /mnt/logs/}
    - {name: tensorboard_gcs_logs, value: 'gs://<BUCKET_NAME>/brain/logs'}
    - {name: model_output_base_path, value: /mnt/saved_model}
    - {name: gcs_path, value: 'gs://<BUCKET_NAME>/brain/model'}
    - {name: gcs_path_confusion, value: 'gs://<BUCKET_NAME>/brain'}
    - {name: mode, value: gcs}
    - {name: probability, value: '0.5'}
    - {name: serving_name, value: kfserving-braintumor}
    - {name: serving_namespace, value: kubeflow}
    - {name: image, value: 'gcr.io/<PROJECT_ID>/brain_tumor_scan/kf_serving_braintest:v1'}
  serviceAccountName: pipeline-runner
